demo()
m <- matrix (nrow = 2, ncol = 3)
m
m <- matrix (1:6, nrow = 2, ncol = 3)
m
m1 <- 1:10
dim(m1) >- c(2,5)
dim(m1) <- c(2,5)
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Users/Fafner/Documents/R/win-library/3.0")
#######################################
########       Projet AD       ########
########       Sujet n°4       ########
########    encoding : UTF8    ########
#######################################
# Packages nécessaires
require(ggplot2)
require(plyr)
require(dplyr)
require(pls) # PLS
require(glmnet) # LASSO & elastic net
require(caret) # Feature selection. http://cran.r-project.org/web/packages/caret/vignettes/caret.pdf
require(corrplot)
# Définition du répertoire de travail
setwd("~/R/MSIAAP/Data_analysis")
### Lecture des données ###
# Lecture des fichiers, regroupés en un fichier commun dataset
dataset <- do.call(cbind, lapply(list.files("~/R/MSIAAP/Data_analysis/Data",
full.names = TRUE), read.delim, header = TRUE))
dataset <- dataset[,!(names(dataset) %in% "Ligand")] # enlève les colonnes "Ligands" qui étaient répétées
# NB : grep() = pattern matching and replacement
dim(dataset) # 279 variables : 278 descripteurs moléculaires + 1 variable explicative
# Sélection des variables non numériques
dataset[!sapply(dataset,is.numeric)]  # Aucune n'est retenue, les variables ont toutes été bien reconnues
str(dataset)
na <- is.na(dataset[[ncol(dataset)]])
as.numeric(na)
corplot <- cor(dataset)
pairs(dataset)
### Création des sets d'entraînement et de test ###
### Sélection des variables ###
# p-value : mauvais
# AIC & BIC : à éviter
# LASSO & Elastic Net : OUi
# Centrage-réduction de toutes les variables explicatives
dat.scale<- scale(dataset[1:(ncol(dataset)-1)],center=TRUE,scale=TRUE)
corMat <- cor(dat.scale)
#compute the correlation matrix
corrplot(corMat, order = "hclust")
#visualize the matrix, clustering features by correlation index.
### Création du modèle ###
# Test PLS
res.plsr <- plsr(Vss ~ ., data = dataset, validation = "CV", segments = 2)
res.plsr$validation$PRESS
plot(1:(ncol(dataset)-1), res.plsr$validation$PRESS)
plot(1:100, res.plsr$validation$PRESS[,1:100])
min(res.plsr$validation$PRESS)
# Beaucoup trop de variables, le PRESS augmente extremement vite.
# Test LASSO
xfactors <- model.matrix(Vss ~ ., data = dataset)#[,-1]
glmmod <- glmnet(xfactors, y = dataset$Vss,alpha=1,family='multinomial')
#plot variable coefficients vs. shrinkage parameter lambda.
plot(glmmod,xvar="lambda")
grid()
glmmod
### Validation du modèle ###
?corrplot
corrplot(corMat, order = "hclust", tl.cex = NULL)
corrplot(corMat, order = "hclust", tl.cex = 0)
corrplot(corMat, order = "hclust", tl.cex = 0.1)
names(dat.scale) <- (1:(ncol(dataset)-1))
names(dat.scale)
?var.name
?var.names
??variable.name
?variable.name
?variable.names
dat.scale<- scale(dataset[1:(ncol(dataset)-1)],center=TRUE,scale=TRUE)
colnames(dat.scale) <- (1:(ncol(dataset)-1))
corMat <- cor(dat.scale)
corrplot(corMat, order = "hclust")
highCor <- findCorrelation(corMat, 0.70)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dim(datFiltered.scale)
dim(dat.scale)
highCor <- findCorrelation(corMat, 0.60)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
?findCorrelation
highCor <- findCorrelation(corMat, 0.60)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dim(datFiltered.scale)
highCor <- findCorrelation(corMat, 0.55)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dim(datFiltered.scale)
highCor <- findCorrelation(corMat, 0.55)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dim(datFiltered.scale)
highCor <- findCorrelation(corMat, 0.60)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dim(datFiltered.scale)
dat.scale<- scale(dataset[1:(ncol(dataset)-1)],center=TRUE,scale=TRUE)
colnames(dat.scale) <- (1:(ncol(dataset)-1))
highCor <- findCorrelation(corMat, 0.60)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dim(datFiltered.scale)
highCor <- findCorrelation(corMat, 0.60)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
dim(datFiltered.scale)
corMat <- cor(datFiltered.scale)
corrplot(corMat, order = "hclust")
dat.scale<- scale(dataset[1:(ncol(dataset)-1)],center=TRUE,scale=TRUE)
colnames(dat.scale) <- (1:(ncol(dataset)-1))
# Nom des colonnes remplacés par des chiffres afin de simplifier la représentation graphique
corMat <- cor(dat.scale)
highCor <- findCorrelation(corMat, 0.60)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
dim(datFiltered.scale)
corMat.Filt <- cor(datFiltered.scale)
corrplot(corMat.Filt, order = "hclust")
highCor <- findCorrelation(corMat, 0.65)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
dim(datFiltered.scale)
corMat.Filt <- cor(datFiltered.scale)
corrplot(corMat.Filt, order = "hclust")
corrplot(corMat, order = "hclust", tl.cex = 0.1)
#visualize the matrix, clustering features by correlation index.
# Il y a des groupes de variables fortement corrélées.
highCor <- findCorrelation(corMat, 0.65)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
dim(datFiltered.scale)
corMat.Filt <- cor(datFiltered.scale)
corrplot(corMat.Filt, order = "hclust", tl.cex = 0.1)
highCor <- findCorrelation(corMat, 0.70)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
dim(datFiltered.scale)
corMat.Filt <- cor(datFiltered.scale)
corrplot(corMat.Filt, order = "hclust", tl.cex = 0.1)
?corrplot()
corrplot(corMat, order = "original", tl.cex = 0.1)
highCor
corrplot(corMat, order = "hclust", tl.cex = 0.1)
install.packages('knitr', dependencies = TRUE)
c.plot1 <- corrplot(corMat, order = "hclust", tl.cex = 0.1)
require(ggplot2)
require(plyr)
require(dplyr)
require(pls) # PLS
require(glmnet) # LASSO & elastic net
require(caret) # Feature selection. http://cran.r-project.org/web/packages/caret/vignettes/caret.pdf
require(corrplot)
# Définition du répertoire de travail
setwd("~/R/MSIAAP/Data_analysis")
### Lecture des données ###
# Lecture des fichiers, regroupés en un fichier commun dataset
dataset <- do.call(cbind, lapply(list.files("~/R/MSIAAP/Data_analysis/Data",
full.names = TRUE), read.delim, header = TRUE))
dataset <- dataset[,!(names(dataset) %in% "Ligand")] # enlève les colonnes "Ligands" qui étaient répétées
# NB : grep() = pattern matching and replacement
dim(dataset) # 279 variables : 278 descripteurs moléculaires + 1 variable explicative
# Sélection des variables non numériques
dataset[!sapply(dataset,is.numeric)]  # Aucune n'est retenue, les variables ont toutes été bien reconnues
str(dataset)
na <- is.na(dataset[[ncol(dataset)]])
as.numeric(na)
### Création des sets d'entraînement et de test ###
### Sélection des variables ###
# p-value : mauvais
# AIC & BIC : à éviter
# LASSO & Elastic Net : OUi
# Centrage-réduction de toutes les variables explicatives
dat.scale<- scale(dataset[1:(ncol(dataset)-1)],center=TRUE,scale=TRUE)
colnames(dat.scale) <- (1:(ncol(dataset)-1))
# Nom des colonnes remplacés par des chiffres afin de simplifier la représentation graphique
corMat <- cor(dat.scale)
# Calcul des corrélations
c.plot1 <- corrplot(corMat, order = "hclust", tl.cex = 0.1)
#visualize the matrix, clustering features by correlation index.
# Il y a des groupes de variables fortement corrélées.
highCor <- findCorrelation(corMat, 0.70)
#Apply correlation filter at 0.70,
#then we remove all the variable correlated with more 0.7.
datFiltered.scale <- dat.scale[,-highCor]
dim(datFiltered.scale)
corMat.Filt <- cor(datFiltered.scale)
c.plot2 <- corrplot(corMat.Filt, order = "hclust", tl.cex = 0.1)
c.plot1
?findCorrelation()
detach("package:caret", unload=TRUE)
?findCorrelation()
